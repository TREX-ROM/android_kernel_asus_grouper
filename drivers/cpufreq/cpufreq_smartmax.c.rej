diff a/drivers/cpufreq/cpufreq_smartmax.c b/drivers/cpufreq/cpufreq_smartmax.c	(rejected hunks)
@@ -54,54 +64,68 @@ static unsigned int ramp_up_step;
  * Zero disables and will calculate ramp down according to load heuristic.
  * When above the ideal freqeuncy we always ramp down to the ideal freq.
  */
-#define DEFAULT_RAMP_DOWN_STEP 250000
+#define DEFAULT_RAMP_DOWN_STEP 150000
 static unsigned int ramp_down_step;
 
 /*
  * CPU freq will be increased if measured load > max_cpu_load;
  */
-#define DEFAULT_MAX_CPU_LOAD 80
-static unsigned long max_cpu_load;
+#define DEFAULT_MAX_CPU_LOAD 75
+static unsigned int max_cpu_load;
 
 /*
  * CPU freq will be decreased if measured load < min_cpu_load;
  */
-#define DEFAULT_MIN_CPU_LOAD 45
-static unsigned long min_cpu_load;
+#define DEFAULT_MIN_CPU_LOAD 40
+static unsigned int min_cpu_load;
 
 /*
- * The minimum amount of time to spend at a frequency before we can ramp up.
+ * The minimum amount of time in nsecs to spend at a frequency before we can ramp up.
  * Notice we ignore this when we are below the ideal frequency.
  */
-#define DEFAULT_UP_RATE_US 20000
-static unsigned long up_rate_us;
+#define DEFAULT_UP_RATE 50000
+static unsigned int up_rate;
 
 /*
- * The minimum amount of time to spend at a frequency before we can ramp down.
+ * The minimum amount of time in nsecs to spend at a frequency before we can ramp down.
  * Notice we ignore this when we are above the ideal frequency.
  */
-#define DEFAULT_DOWN_RATE_US 40000
-static unsigned long down_rate_us;
+#define DEFAULT_DOWN_RATE 50000
+static unsigned int down_rate;
 
+/* in nsecs */
 #define DEFAULT_SAMPLING_RATE 50000
 static unsigned int sampling_rate;
 
-#define DEFAULT_INPUT_BOOST_DURATION 80000000
+/* in nsecs */
+#define DEFAULT_INPUT_BOOST_DURATION 50000000
 static unsigned int input_boost_duration;
 
-static unsigned int touch_poke_freq = 1300000;
+static unsigned int touch_poke_freq = 1150000;
 static bool touch_poke = true;
 
 static bool sync_cpu_downscale = false;
 
-static unsigned int boost_freq = 1300000;
+/*
+ * external boost interface - boost if duration is written
+ * to sysfs for boost_duration
+ */
+static unsigned int boost_freq = 760000;
 static bool boost = true;
+
+/* in nsecs */
 static unsigned int boost_duration = 0;
 
-/*************** End of tunables ***************/
+/* Consider IO as busy */
+#define DEFAULT_IO_IS_BUSY 1
+static unsigned int io_is_busy;
+
+#define DEFAULT_IGNORE_NICE 1
+static unsigned int ignore_nice;
 
+/*************** End of tunables ***************/
 
-static unsigned int dbs_enable;	/* number of CPUs using this policy */
+static unsigned int dbs_enable; /* number of CPUs using this policy */
 
 static void do_dbs_timer(struct work_struct *work);
 
