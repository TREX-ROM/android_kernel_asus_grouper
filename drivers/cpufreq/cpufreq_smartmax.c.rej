diff a/drivers/cpufreq/cpufreq_smartmax.c b/drivers/cpufreq/cpufreq_smartmax.c	(rejected hunks)
@@ -71,32 +61,32 @@ static unsigned int ramp_down_step;
  * CPU freq will be increased if measured load > max_cpu_load;
  */
 #define DEFAULT_MAX_CPU_LOAD 80
-static unsigned int max_cpu_load;
+static unsigned long max_cpu_load;
 
 /*
  * CPU freq will be decreased if measured load < min_cpu_load;
  */
 #define DEFAULT_MIN_CPU_LOAD 45
-static unsigned int min_cpu_load;
+static unsigned long min_cpu_load;
 
 /*
  * The minimum amount of time to spend at a frequency before we can ramp up.
  * Notice we ignore this when we are below the ideal frequency.
  */
 #define DEFAULT_UP_RATE_US 20000
-static unsigned int up_rate_us;
+static unsigned long up_rate_us;
 
 /*
  * The minimum amount of time to spend at a frequency before we can ramp down.
  * Notice we ignore this when we are above the ideal frequency.
  */
 #define DEFAULT_DOWN_RATE_US 40000
-static unsigned int down_rate_us;
+static unsigned long down_rate_us;
 
 #define DEFAULT_SAMPLING_RATE 50000
 static unsigned int sampling_rate;
 
-#define DEFAULT_INPUT_BOOST_DURATION 50000000
+#define DEFAULT_INPUT_BOOST_DURATION 80000000
 static unsigned int input_boost_duration;
 
 static unsigned int touch_poke_freq = 1300000;
@@ -955,8 +853,6 @@ static struct attribute * smartmax_attributes[] = {
 	&sync_cpu_downscale_attr.attr,
 	&boost_freq_attr.attr,
 	&boost_duration_attr.attr,
-	&io_is_busy_attr.attr,
-	&ignore_nice_attr.attr,
 	NULL,
 };
 
@@ -986,14 +882,13 @@ static int cpufreq_smartmax_boost_task (
 		if (boost_running)
 			continue;
 			
+        boost_running = true;
         /* boost ASAP */
         /* we always boost cpu 0 */
         if (tegra_input_boost(0, cur_boost_freq) < 0){
             continue;
         }
 
-        boost_running = true;
-        
         boost_end_time =
             ktime_to_ns(ktime_get()) + boost_duration;
 
